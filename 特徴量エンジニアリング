cols = df.columns
df_feat = df.copy() #コピー作成

#ラグ/差分
lags = [24, 168]  # 24h, 168h
for lag in lags:
    for col in cols:
        df_feat[f'{col}_lag_{lag}'] = df_feat[col].shift(lag)
        df_feat[f'{col}_diff_{lag}'] = df_feat[col] - df_feat[col].shift(lag)

# ローリング
windows = [24, 168]  # 24h, 168h
for window in windows:
    for col in cols:
        roll = df_feat[col].rolling(window=window, closed='left')
        df_feat[f'{col}_roll_mean_{window}'] = roll.mean()
        df_feat[f'{col}_roll_std_{window}']  = roll.std()

#指数平滑
df_feat['OT_ewm24'] = df_feat['OT'].ewm(span=24, adjust=False).mean()

#欠損値処理
columns = df_feat.columns


# 非定常カラムの特定
non_stationary_cols = []

for col in columns:
    series = df_feat[col]
    series = series.dropna()
    kpss_stat, kpss_p, *_ = kpss(series, regression='ct')
    if kpss_p > 0.05:
        print(f'定常 {col}: KPSS p={kpss_p}')
    else:
        print(f'非定常 {col}: KPSS p={kpss_p}')
        non_stationary_cols.append(col)

# 非定常カラムのみ差分を取る
for col in non_stationary_cols:
    df_feat[col] = df_feat[col].diff()

df_feat = df_feat.dropna()

# 定常性再確認
for col in columns:
    series = df_feat[col]
    series = series.dropna()
    kpss_stat, kpss_p, *_ = kpss(series, regression='ct')
    if kpss_p > 0.05:
       print(f'定常 {col}: KPSS p={kpss_p}')
    else:
       print(f'非定常 {col}: KPSS p={kpss_p}')
